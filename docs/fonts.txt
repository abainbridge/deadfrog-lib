Deadfrog lib has its own font file format (defined below). Fonts can be loaded
from a file or can be embedded directly into the executable. The problems with
relying on system fonts are:

* Your application needs to be tested with known fonts, but there aren't any
  fonts that are guaranteed to be pre-installed on all platforms. Even if you
  only target a single platform, there's still approximately no fonts that are
  guaranteed to be there. So, you have to install a font with your application,
  which is particularly annoying if you don't otherwise need an installer.

* When someone installs your application, they don't want your UI fonts
  appearing in their word processor / drawing package etc.


The problems with the existing font formats are:

* The resulting fonts are unnecessarily large.

* The formats are complex and make the run-time loader complex (ie slow and
  large).


The problem with vector fonts are:

* They are complex - hard to implement a small parser.

* They are large.

* For small sizes, you need to specify the font at the pixel level anyway,
otherwise it'll be a blurry mess if anti-aliased, or an ugly mess if not.
(Windows' ClearType mostly avoid the blurry/ugly mess problem by doing a great
job of "hinting" their fonts and doing a great job of subpixel anti-aliasing.
The problems there is that you'll never be able to author your own fonts that
are as well hinted, you can't redistribute theirs to guarantee them being
available, and rendering anti-aliased text is slow anyway because it requires
read-modify-write on each pixel instead of just write).

So, Deadfrog Lib implements its own bitmap font file format that is easy to
parse, doesn't contain stupid information like the DPI of the font (how can a
collection of pixels have a DPI? The screen is what defines the DPI. My 13
pixel tall font will be smaller on a high DPI screen than a low DPI one. Any
attempt to keep it the same size is doomed). Compared to the ancient Windows
bitmap font file that you might still find today, the Deadfrog format is about
3x smaller. Most of the saving comes from Run Length Encoding. There's still
room for further improvement with simple LZW or Huffman coding, but that's
starting to get silly.

So, now you're fully on board with the rational decision process, here's the
font format spec:


Bytes 0:3 are the id string "dfbf".

Byte 4 is the format version.


= Version 0 =

Only supports monochrome bitmap fonts. All font files define 224 glyphs,
covering extended ASCII codes from 32 to 255.

== Container ==

Byte 5 is the number of fonts in the file, called num_fonts.

Byte 6 to 6 + num_fonts * 4 are offsets to the start of each font.


== Font ==

Byte 6 is the width of the widest glyph, in pixels. If the font is fixed
width, then all the glyphs are this width.

Byte 7 is the height of the font, in pixels. This is the vertical spacing of
adjacent rows of text.

Byte 8 contains some flags.
    mask 1 - indicates if the font is fixed width or variable width. 0=fixed,
             1=variable.
    

If variable width, the next 224 bytes are the widths of each glyph.

The remaining bytes represent an RLE encoded bitmap.

* The bitmap has 16 glyphs per row and 14 rows (16 * 14 = 224).

* The first row defines glyphs for ASCII values 32 to 47. The next from 48 to
  63, and so on.

* The horizontal spacing of the glyphs on the bitmap is the same for fixed and
  variable width fonts. For example, if the widest glyph is 7 pixels wide, the
  first glyph of the row starts in column 0, the second in column 7.

* The vertical spacing of the glyphs is the only sensible one. The pitch is the
  font height.

* There is no padding.

* Each byte 

* The RLE encoding is in row-major order. A single "run" can cross row
boundaries. For example, This leads to a more efficient encoding.